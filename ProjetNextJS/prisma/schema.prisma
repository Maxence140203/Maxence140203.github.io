datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/migrate-shadow
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialActions"] // You won't need this in Prisma 3.X or higher.
}

model User {
  id            Int           @id @default(autoincrement())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  groups        Group[]       @relation("groupToUser")
  GroupToUser   GroupToUser[]
}

model GroupToUser {
  groupId Int
  userId  Int

  group Group @relation(fields: [groupId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  @@id([groupId, userId])
}

model Reminder {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  date        DateTime
  color       String?
  photo       String?

  group   Group @relation("groupToReminder", fields: [groupId], references: [id])
  groupId Int
}

model Group {
  id          Int           @id @default(autoincrement())
  name        String
  reminders   Reminder[]    @relation("groupToReminder")
  users       User[]        @relation("groupToUser")
  GroupToUser GroupToUser[]
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int     @unique
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
